diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3650aca..c3310fb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -168,8 +168,8 @@ set_property(TARGET ${JLCXX_TARGET} APPEND PROPERTY
   COMPATIBLE_INTERFACE_STRING ${JLCXX_TARGET}_MAJOR_VERSION
 )
 target_compile_definitions(${JLCXX_TARGET} PUBLIC "JULIA_ENABLE_THREADING")
-target_compile_features(${JLCXX_TARGET} PUBLIC cxx_std_17)
-target_compile_features(${JLCXX_STL_TARGET} PUBLIC cxx_std_17)
+target_compile_features(${JLCXX_TARGET} PUBLIC cxx_std_20)
+target_compile_features(${JLCXX_STL_TARGET} PUBLIC cxx_std_20)
 
 generate_export_header(${JLCXX_TARGET})
 
diff --git a/include/jlcxx/module.hpp b/include/jlcxx/module.hpp
index ae75945..19797ba 100644
--- a/include/jlcxx/module.hpp
+++ b/include/jlcxx/module.hpp
@@ -903,9 +903,19 @@ namespace detail
   template<typename T>
   void finalize(T* to_delete)
   {
-    delete to_delete;
-  }
 
+    constexpr bool has_getImpl = requires(const T& t) {
+        t.getImpl();
+    };
+
+
+    if constexpr(has_getImpl) {
+        operator delete(to_delete);
+        // TODO? Will probably leak memory
+    } else {
+        delete to_delete;
+    }
+  }
   template<typename T>
   struct CreateParameterType
   {
diff --git a/include/jlcxx/stl.hpp b/include/jlcxx/stl.hpp
index 7043904..57fd0b6 100644
--- a/include/jlcxx/stl.hpp
+++ b/include/jlcxx/stl.hpp
@@ -77,7 +77,7 @@ void wrap_common(TypeWrapperT& wrapped)
   using T = typename WrappedT::value_type;
   wrapped.module().set_override_module(StlWrappers::instance().module());
   wrapped.method("cppsize", &WrappedT::size);
-  wrapped.method("resize", [] (WrappedT& v, const cxxint_t s) { v.resize(s); });
+ // wrapped.method("resize", [] (WrappedT& v, const cxxint_t s) { v.resize(s); });
   wrapped.method("append", [] (WrappedT& v, jlcxx::ArrayRef<T> arr)
   {
     const std::size_t addedlen = arr.size();
@@ -143,12 +143,12 @@ struct WrapValArray
   {
     using WrappedT = typename TypeWrapperT::type;
     using T = typename WrappedT::value_type;
-    wrapped.template constructor<std::size_t>();
+    //wrapped.template constructor<std::size_t>();
     wrapped.template constructor<const T&, std::size_t>();
     wrapped.template constructor<const T*, std::size_t>();
     wrapped.module().set_override_module(StlWrappers::instance().module());
     wrapped.method("cppsize", &WrappedT::size);
-    wrapped.method("resize", [] (WrappedT& v, const cxxint_t s) { v.resize(s); });
+//    wrapped.method("resize", [] (WrappedT& v, const cxxint_t s) { v.resize(s); });
     wrapped.method("cxxgetindex", [] (const WrappedT& v, cxxint_t i) -> const T& { return v[i-1]; });
     wrapped.method("cxxgetindex", [] (WrappedT& v, cxxint_t i) -> T& { return v[i-1]; });
     wrapped.method("cxxsetindex!", [] (WrappedT& v, const T& val, cxxint_t i) { v[i-1] = val; });
